# -*- coding: utf-8 -*-
from __future__ import unicode_literals
import uuid

from django.db import models, transaction

from .constants import (
    TYPE_OTHER, DEVICE_TYPE_CHOICES,
    STATUS_INITIAL, STATUS_OK, DEVICE_STATUS_CHOICES,
    QUERY_SYNC, QUERY_ACTION
)
from apps.components.constants import (
    EVENT_ACTION_TYPE_USER, EVENT_ACTION_TYPE_RULE
)

from django_module_attr.models import GenericData, Attribute

from apps.locations.models import Location
from apps.manufacters.models import Manufacter
from apps.components.models_md import EventAction, EventState

#
# https://developers.google.com/assistant/smarthome/guides
# https://developers.google.com/assistant/smarthome/concepts/homegraph
# https://developers.google.com/assistant/smarthome/concepts/devices-traits
#


class Device(models.Model):
    device_uuid = models.UUIDField(default=uuid.uuid4, unique=True)
    external_id = models.CharField(max_length=100)
    name = models.CharField(max_length=100, blank=True, default='')
    type = models.CharField(max_length=10,
                            default=TYPE_OTHER,
                            choices=DEVICE_TYPE_CHOICES)
    # class_device ---> Este podria indicar algun tipo de comportamiento
    status = models.CharField(max_length=10,
                              default=STATUS_INITIAL,
                              choices=DEVICE_STATUS_CHOICES)
    enabled = models.BooleanField(default=True)

    # Generated by the system
    # Store specific data and state
    # Every device store your own metadata
    metadata = models.ForeignKey(GenericData,
                                 null=True,
                                 related_name="+",
                                 on_delete=models.CASCADE)
    # Atributos del dispositivo. THINK DIFERENCE WITH metadata['config']
    attrs = models.ManyToManyField(Attribute, related_name="+")

    container = models.ForeignKey("Device",
                                  null=True,
                                  related_name="devices",
                                  on_delete=models.PROTECT)
    location = models.ForeignKey(Location,
                                 null=True,
                                 related_name="devices",
                                 on_delete=models.PROTECT)
    manufacter = models.ForeignKey(Manufacter,
                                   null=True,
                                   related_name="devices",
                                   on_delete=models.PROTECT)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ('created_at',)

    @classmethod
    def create(
        cls, external_id, name, location, manufacter, type=TYPE_OTHER,
        config_metadata=None, container=None, attrs=[],
    ):
        with transaction.atomic():
            metadata = GenericData.create({
                'config': config_metadata,  # Every device store that it need
                'data': {},  # Some state, value general. For example: status of alarm
            })

            device = Device.objects.create(
                external_id=external_id,
                name=name,
                type=type,
                location=location,
                manufacter=manufacter,
                container=container,
                metadata=metadata
            )
            device.attrs.set(attrs)

        return device

    def remove(self):
        with transaction.atomic():
            self.components.all().delete()
            self.attrs.all().delete()
            self.delete()

    def register_action(self, data, user=None):
        # Register the event
        EventAction.create(
            self.id,
            None,  # No component
            EVENT_ACTION_TYPE_USER if user else EVENT_ACTION_TYPE_RULE,
            data,
            user.id if user else None
        )

    def receive_sync(self, payload):
        if self.status != STATUS_OK:
            self.status = STATUS_OK
            self.save()

        metadata = self.metadata.get_value()
        if metadata:  # If None do nothing
            metadata['data'] = payload['data']
            self.metadata.update_value(metadata)

        for trait_data in payload.get('traits', []):
            try:
                component = self.components.get(external_id=trait_data.get('external_id', None))
                component.receive_sync(trait_data, False)
            except models.Model.DoesNotExist:
                pass

    def receive_state(self, payload):
        if 'trait' in payload:
            trait_data = payload['trait']
            try:
                component = self.components.get(external_id=trait_data.get('external_id', None))
                component.receive_state(trait_data)
            except models.Model.DoesNotExist:
                pass
        else:
            metadata = self.metadata.get_value()
            if metadata:  # If None do nothing
                metadata['data'] = payload['data']
                self.metadata.update_value(metadata)

            EventState.create(
                self.pk,
                None,  # No component
                payload['sub_type'],
                payload['data']
            )

    def receive_action(self, payload):
        # Not for now
        pass
