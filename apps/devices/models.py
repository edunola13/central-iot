# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models

from .constants import (
    TYPE_OTHER, DEVICE_TYPE_CHOICES,
    STATUS_INITIAL, DEVICE_STATUS_CHOICES
)

from django_module_attr.models import GenericData, Attribute

from apps.locations.models import Location

#
# https://developers.google.com/assistant/smarthome/guides
# https://developers.google.com/assistant/smarthome/concepts/homegraph
# https://developers.google.com/assistant/smarthome/concepts/devices-traits
#


class Device(models.Model):
    external_id = models.CharField(max_length=100)
    name = models.CharField(max_length=100, blank=True, default='')
    type = models.CharField(max_length=10,
                            default=TYPE_OTHER,
                            choices=DEVICE_TYPE_CHOICES)
    # class_device ---> Este podria indicar si son devices que se manejan desde aca o desde otro backend
    status = models.CharField(max_length=10,
                              default=STATUS_INITIAL,
                              choices=DEVICE_STATUS_CHOICES)
    enabled = models.BooleanField(default=True)

    # Generated by the system
    # Store specific data and state, can group all the components's state
    # Every device store yout own metadata
    # Aca retornamos no solo caracteristica y estado si no que tambien que se puede hacer
    # con este device. Es algo que van a usar los front o quien consuma la api para asi saber que
    # puede hacer.
    metadata = models.ForeignKey(GenericData,
                                 null=True,
                                 related_name="+",
                                 on_delete=models.CASCADE)
    # Atributos del dispositivo
    attrs = models.ManyToManyField(Attribute, related_name="+")

    container = models.ForeignKey("Device",
                                  null=True,
                                  related_name="devices",
                                  on_delete=models.PROTECT)
    location = models.ForeignKey(Location,
                                 null=True,
                                 related_name="devices",
                                 on_delete=models.PROTECT)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ('name',)

    @classmethod
    def create(cls, external_id, name, location, type=TYPE_OTHER, container=None, attrs=[]):
        device = Device.objects.create(
            external_id=external_id,
            name=name,
            type=type,
            location=location,
            container=container
        )
        device.attrs.set(attrs)

        return device
