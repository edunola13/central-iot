# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, transaction
from django.contrib.auth import get_user_model

from apps.iot_devices.proto.devices_pb2 import Payload, Trait
from apps.iot_devices.proto.wrapper import PayloadWrapper

from .constants import (
    TYPE_OTHER, COMPONENT_TYPE_CHOICES,
)
from apps.devices.constants import (
    QUERY_ACTION_TYPE_USER, QUERY_ACTION_TYPE_RULE
)

from apps.devices.models import Device
from django_module_attr.models import GenericData, Tag

from .models_md import EventState, EventAction

User = get_user_model()


class Component(models.Model):
    """
    Modelo Component (Trait).

    https://developers.google.com/assistant/smarthome/concepts/homegraph
    https://developers.google.com/assistant/smarthome/traits
    """

    external_id = models.CharField(max_length=100)
    name = models.CharField(max_length=100)
    type = models.CharField(max_length=10,
                            default=TYPE_OTHER,
                            choices=COMPONENT_TYPE_CHOICES)
    enabled = models.BooleanField(default=True)

    # Generated by the system
    # Store specific data and state
    # Every component store your own metadata
    metadata = models.ForeignKey(GenericData,
                                 null=True,
                                 related_name="+",
                                 on_delete=models.CASCADE)
    tags = models.ManyToManyField(Tag, related_name="+")

    device = models.ForeignKey(Device,
                               related_name="components",
                               on_delete=models.PROTECT)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

    class Meta:
        ordering = ('created_at',)

    @classmethod
    def create(cls, external_id, name, device, type=TYPE_OTHER, config_metadata=None, tags=[]):
        with transaction.atomic():
            metadata = GenericData.create({
                'config': config_metadata,  # Every trait/component store that it need
                'data': {}  # your status, value, etc
            })

            component = Component.objects.create(
                external_id=external_id,
                name=name,
                type=type,
                metadata=metadata,
                device=device,
            )
            component.tags.set(tags)

        return component

    def register_action(self, payload: PayloadWrapper, user: User=None):
        # Register the event
        EventAction.create(
            self.device.id,
            self.id,
            QUERY_ACTION_TYPE_USER if user else QUERY_ACTION_TYPE_RULE,
            payload.to_dict(),
            user.id if user else None
        )

    def receive_sync(self, payload: PayloadWrapper, trait: Trait, event: bool=True):
        metadata = self.metadata.get_value()
        if metadata:  # If None do nothing
            metadata['data'] = {k: v for k, v in trait.values.items()}
            self.metadata.update_value(metadata)
            if trait.name:
                self.name = trait.name
                self.save(update_fields=['name'])

    def receive_state(self, payload: PayloadWrapper, trait: Trait):
        if trait.name:
            self.name = trait.name
            self.save(update_fields=['name'])

        metadata = self.metadata.get_value()
        if metadata:  # If None do nothing
            metadata['data'].update({k: v for k, v in trait.values.items()})
            self.metadata.update_value(metadata)

        if payload.sub_type != Payload.PAYLOAD_SUB_TYPE_NONE:
            # If NONE solicito el cloud, entonces no registrar
            EventState.create(
                self.device.pk,
                self.pk,
                payload.sub_type,
                trait.values
            )

    def receive_action(self, data):
        """Not for now."""
        pass
