# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, transaction

from .constants import (
    TYPE_OTHER, COMPONENT_TYPE_CHOICES,
    EVENT_ACTION_TYPE_USER, EVENT_ACTION_TYPE_RULE
)
from apps.devices.constants import QUERY_ACTION

from apps.devices.models import Device
from django_module_attr.models import GenericData, Tag

from .models_md import EventState, EventAction

#
# https://developers.google.com/assistant/smarthome/concepts/homegraph
# https://developers.google.com/assistant/smarthome/traits
#


class Component(models.Model):
    external_id = models.CharField(max_length=100)
    name = models.CharField(max_length=100)
    type = models.CharField(max_length=10,
                            default=TYPE_OTHER,
                            choices=COMPONENT_TYPE_CHOICES)
    enabled = models.BooleanField(default=True)

    # Generated by the system
    # Store specific data and state
    # Every component store your own metadata
    metadata = models.ForeignKey(GenericData,
                                 null=True,
                                 related_name="+",
                                 on_delete=models.CASCADE)
    tags = models.ManyToManyField(Tag, related_name="+")

    device = models.ForeignKey(Device,
                               related_name="components",
                               on_delete=models.PROTECT)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

    class Meta:
        ordering = ('name',)

    @classmethod
    def create(cls, external_id, name, device, type=TYPE_OTHER, config_metadata=None, tags=[]):
        with transaction.atomic():
            metadata = GenericData.create({
                'config': config_metadata,  # Every trait/component store that it need
                'data': {}  # your status, value, etc
            })

            component = Component.objects.create(
                external_id=external_id,
                name=name,
                type=type,
                metadata=metadata,
                device=device,
            )
            component.tags.set(tags)

        return component

    def register_action(self, data, user=None):
        # Register the event
        EventAction.create(
            self.device.id,
            self.id,
            EVENT_ACTION_TYPE_USER if user else EVENT_ACTION_TYPE_RULE,
            data,
            user.id if user else None
        )

    def receive_sync(self, payload, event=True):
        metadata = self.metadata.get_value()
        if metadata:  # If None do nothing
            metadata['data'] = payload['data']
            self.metadata.update_value(metadata)

    def receive_state(self, payload):
        metadata = self.metadata.get_value()
        if metadata:  # If None do nothing
            metadata['data'] = payload['data']
            self.metadata.update_value(metadata)

        EventState.create(
            self.device.pk,
            self.pk,
            payload['sub_type'],
            payload['data']
        )

    def receive_action(self, data):
        # Not for now
        pass
