"""
Django settings for hibris_iot project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
import environ

from django_module_common.simple_mongo_model import settings as settings_mongo
from datetime import timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    CELERY_TASK_ALWAYS_EAGER=(bool, False),
)
# reading .env file
environ.Env.read_env()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$fc7#t9-amhaj+il_phs7vid1xz3f(*c208_iz^=huf^a=m5$o'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
TESTING = sys.argv[1:2] == ['test']

# For now ALL ALLOWED
# ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['localhost', '*']
CORS_ORIGIN_ALLOW_ALL = True


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'corsheaders',
    'django_filters',
    'anymail',
    'simple_email_confirmation',
    'django_rest_passwordreset',

    'drf_yasg',

    'django_module_users',
    'django_module_attr',

    'apps.auth_hibris_iot',
    'apps.manufacters',
    'apps.locations',
    'apps.devices',
    'apps.components',

    'apps.iot_devices',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # https://docs.djangoproject.com/en/3.0/topics/i18n/translation/#how-django-discovers-language-preference
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'hibris_iot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hibris_iot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
DATABASE_URL = os.getenv('DATABASE_URL', None)
if DATABASE_URL:
    DATABASES['default'] = env.db()


MONGO_HOST = env.str('MONGO_HOST', default='localhost')
MONGO_PORT = env.int('MONGO_PORT', default=0)
MONGO_DB = env.str('MONGO_DB', default="iot")
MONGO_USERNAME = os.getenv('MONGO_USERNAME', None)
MONGO_PASSWORD = os.getenv('MONGO_PASSWORD', None)
MONGO_AUTH_MECHANISM = os.getenv('MONGO_AUTH_MECHANISM', 'SCRAM-SHA-256')
settings_mongo.load_settings({
    'databases': {
        'default': {
            'MONGO_HOST': MONGO_HOST,
            'MONGO_PORT': MONGO_PORT,
            'MONGO_DB': MONGO_DB,
            'TZ_AWARE': True,
            'USERNAME': MONGO_USERNAME,
            'PASSWORD': MONGO_PASSWORD,
            'AUTH_MECHANISM': MONGO_AUTH_MECHANISM,
        }
    }
})
MONGO_CONFIG = settings_mongo

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'django_module_users.User'

SIMPLE_EMAIL_CONFIRMATION_KEY_LENGTH = 6

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

SITE_URL = env.str('SITE_URL', default='http://localhost:8000')
FRONT_URL = env.str('FRONT_URL', default='http://localhost:3000')

from django.utils.translation import ugettext_lazy as _

LANGUAGES = (
    ('es', _('Spanish')),
)

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),  # here makemessages modify
    os.path.join(BASE_DIR, 'locale_extras'),  # Override modules, here makemessages dont modify
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'staticfiles'),  # Where search
)
STATIC_ROOT = os.path.join(BASE_DIR, env.str('STATIC_ROOT', default='static'))  # Where compile

# For default (only debug work in django server), in other case set explicit base url
MEDIA_URL = '/media/'
if env.str('MEDIA_SERVER', default='NONE') != 'NONE':
    MEDIA_URL = env.str('MEDIA_SERVER')
# For default store in root_folder/media in other case set full path
MEDIA_ROOT = os.path.join(BASE_DIR, env.str('MEDIA_ROOT', default='media'))
if env.str('MEDIA_ROOT', default='media') != 'media':
    MEDIA_ROOT = env.str('MEDIA_ROOT', default='media')

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ),

    'DEFAULT_PAGINATION_CLASS': 'django_module_common.utils.pagination.StandardResultsSetPagination',
    'PAGE_SIZE': 25,

    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter'
    )
}

PUBLIC_KEY = env.str('PUBLIC_KEY', default='').encode("utf-8")
PRIVATE_KEY = env.str('PRIVATE_KEY', default='').encode("utf-8")

JWT_AUTH_HEADER_PREFIX = env.str('JWT_AUTH_HEADER_PREFIX', default='Bearer')
RSA_ALGORITHM = env.str('RSA_ALGORITHM', default='RS256')

ALLOWED_PUBLIC_KEYS = [
    PUBLIC_KEY
]

try:
    from .secrets import APP_KEY
    SECRET_KEY = APP_KEY
except ImportError:
    # Raises django's ImproperlyConfigured exception if SECRET_KEY not in os.environ
    SECRET_KEY = env('SECRET_KEY')

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60 * 2),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=30),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
}

# CELERY STUFF - WITH
CELERY_BROKER_URL = env.str('CELERY_BROKER_URL', default='redis://localhost:6379')
BROKER_URL = env.str('BROKER_URL', default='redis://localhost:6379')
CELERY_RESULT_BACKEND = env.str('CELERY_RESULT_BACKEND', default='redis://localhost:6379')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_WORKER_MAX_TASKS_PER_CHILD = 100
CELERY_BEAT_SCHEDULE = {
    # 're-send-notifications': {
    #     'task': 'sync.tasks.re_send_notifications',
    #     'schedule': 60 * 5,  # 5 minutes
    # },
}

CELERY_TASK_ALWAYS_EAGER = env('CELERY_TASK_ALWAYS_EAGER')

# MAILS - https://github.com/anymail/django-anymail
ANYMAIL = {
    "MAILGUN_API_KEY": env.str('MAILGUN_API_KEY', default=''),
    "MAILGUN_SENDER_DOMAIN": env.str('MAILGUN_SENDER_DOMAIN', default=''),  # your Mailgun domain, if needed
    "SENDGRID_API_KEY": env.str('SENDGRID_API_KEY', default=''),
}
EMAIL_BACKEND = env.str('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')  # or sendgrid.EmailBackend, or...
if TESTING:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

DEFAULT_FROM_EMAIL = env.str('DEFAULT_FROM_EMAIL', default='')
SERVER_EMAIL = env.str('SERVER_EMAIL', default='')

# MQTT MANUFACTERS
MQTT_HOST_MANUFACTER = env.str('MQTT_HOST_MANUFACTER', default='localhost')
MQTT_PORT_MANUFACTER = env.int('MQTT_PORT_MANUFACTER', default=1883)
MQTT_KEEP_ALIVE_MANUFACTER = env.int('MQTT_KEEP_ALIVE_MANUFACTER', default=0)
MQTT_USERNAME_MANUFACTER = env.str('MQTT_USERNAME_MANUFACTER', default='')
MQTT_PASSWORD_MANUFACTER = env.str('MQTT_PASSWORD_MANUFACTER', default='')

# MANUFACTER - INTERNAL
HIBRIS_MANUFACTER = env.str('HIBRIS_MANUFACTER', default='')  # UUID

# MQTT IOT
MQTT_HOST_IOT = env.str('MQTT_HOST_IOT', default='localhost')
MQTT_PORT_IOT = env.int('MQTT_PORT_IOT', default=1883)
MQTT_KEEP_ALIVE_IOT = env.int('MQTT_KEEP_ALIVE_IOT', default=0)
MQTT_USERNAME_IOT = env.str('MQTT_USERNAME_IOT', default='')
MQTT_PASSWORD_IOT = env.str('MQTT_PASSWORD_IOT', default='')

# LOGGINGS
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': '/tmp/debug.log',
            'formatter': 'verbose'
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s '
                      '%(process)d %(thread)d %(message)s'
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

SWAGGER_SETTINGS = {
    'LOGIN_URL': '{}/admin/login'.format(SITE_URL),
    'LOGOUT_URL': '{}/admin/logout'.format(SITE_URL),
    'SECURITY_DEFINITIONS': {
        "api_key": {
            "type": "apiKey",
            "name": "authorization",
            "in": "header"
        },
        "basic": {
            "type": "basic"
        }
    },
}

# Incorporo las configuraciones locales - Las que hay que modificar por ambiente
try:
    from .local_settings import *
except ImportError:
    pass
